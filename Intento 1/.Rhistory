setwd("~/4. UOC/1º Álgebra Lineal/Reto 4")
#-------------------------------------
#Pregunta 3
#--------------------------------------
#Pregunta 1
#---------------------------------------------
#Abrimos archivo variables.csv y lo nombramos como var_df
var_df <- read.csv("C:\\Users\\usuario\\Documents\\4. UOC\\1º Álgebra Lineal\\Reto 4\\variables.csv")
#Imprimimos archivo para ver su contenido
fix(var_df)
#-------------------------------------
#Pregunta 3
#Pregunta 1
#---------------------------------------------
#Abrimos archivo variables.csv y lo nombramos como var_df
var_df <- read.csv("C:\\Users\\usuario\\Documents\\4. UOC\\1º Álgebra Lineal\\Reto 4\\variables.csv")
#Pregunta 1
#---------------------------------------------
#Abrimos archivo variables.csv y lo nombramos como var_df
var_df <- read.csv("C:\\Users\\usuario\\Documents\\4. UOC\\1º Álgebra Lineal\\Reto 4\\variables.csv")
#Imprimimos archivo para ver su contenido
fix(var_df)
var_df
#Comprobamos que var_df es de tipo dataframe
class(var_df)
#Eliminamos la primera columna llamada 'id'. Para ello vamos a usar el paquete "dplyr"
library(dplyr)
var_df <- select(var_df, -id)
#Comprobamos que realmente se ha eliminado la columna
fix(var_df)
var_df
#Convertimos el vector var_df en una matriz
var_matrix <- as.matrix(var_df)
#Comprobamos que ahora el vector var_df es una matriz
class(var_matrix)
#Buscamos la dimensión que tiene la matriz, y podemos observar que nos devuelve
# 61, 12, es decir, contamos con 61 observaciones que coinciden con el número de
#secciones censales, y 12 columnas que coinciden con el número de variables:
dim(var_matrix)
#Asignamos al vector V la columna 'mean_age' de la matriz var_df
V <- var_matrix[,9]
#Definimos vector máximo como el valor máximo de V, y definimos el vector mínimo
#como el valor mínimo de V
maximo <- max(V)
minimo <- min(V)
fix(maximo)
maximo
fix(minimo)
minimo
#Calculamos la razón entre el valor Máximo y el valor Mínimo de V (M/m)
razon <- maximo/minimo
fix(razon)
razon
#Redondeamos resultado a dos decimales
round(razon, digits=2)
#-------------------------------------
#-------------------------------------
#Pregunta 3
#-------------------------------------
#Pregunta 3
#--------------------------------------
#-------------------------------------
#Pregunta 3
#--------------------------------------
#-------------------------------------
#Pregunta 3
#--------------------------------------
#-------------------------------------
#Pregunta 3
#--------------------------------------
#Calculamos la matriz de datos normalizada y la guardamos en la variable Xs
Xs <- as.matrix(scale(var_matrix, center = TRUE, scale = TRUE))
Xs
Xs %>% summarise(Mean = mean(Xs, na.rm = TRUE), SD = sd(Xs, na.rm = TRUE))
Xs %>% summarise(Mean = mean(rent, na.rm = TRUE), SD = sd(rent, na.rm = TRUE))
#Comprobamos que realmente el valor de la media de los datos es prácticamente
#cero y el valor de la desviación típica 1. Usamos para ello la primera columna.
library(dplyr)
Xs %>% summarise(Mean = mean(rent, na.rm = TRUE), SD = sd(rent, na.rm = TRUE))
Xs %>% summarise(Mean = mean(rent,na.rm = TRUE),SD = sd(rent,na.rm = TRUE))
mean(Xs)
sd(Xs)
rount(mean(Xs), digits = 0)
round(mean(Xs), digits = 0)
round(sd(Xs), digits = 0)
#Comprobamos que realmente el valor de la media de los datos de Xs es
#prácticamente cero y el valor de la desviación típica prácticamente 1.
mean(Xs)
sd(Xs)
round(mean(Xs), digits = 0)
round(sd(Xs), digits = 0)
#Ahora vamos a calcular la matriz de covarianza de los datos Xs y la vamos a
#guardar en la variable CXs.
CXs <- cov(Xs)
fix(CXs)
#Ahora vamos a calcular la matriz de covarianza de los datos Xs y la vamos a
#guardar en la variable CXs.
CXs <- cov(Xs)
fix(CXs)
#Visualizamos la matriz como una imagen y la gaurdamos en formato .jpeg
image(CXs)
jpeg('CXs.jpeg')
image(CXs)
#Visualizamos la matriz como una imagen y la gaurdamos en formato .jpeg
image(CXs)
jpeg('CXs.jpeg')
image(CXs)
fix(CXs)
fix(CXs)
max(CXs)
max(CXs)
par_max = which(CXs == max(abs(CXs)), arr.ind = TRUE)
par_max
par_max = which(CXs == max(abs(CXs)), arr.ind = TRUE)
fix(par_max)
par_max = which(CXs == max(abs(CXs)), arr.ind = TRUE)
fix(par_max)
#Calculamos la matriz de datos normalizada y la guardamos en la variable Xs
Xs <- as.matrix(scale(var_matrix, center = TRUE, scale = TRUE))
fix(Xs)
Xs
#Comprobamos que realmente el valor de la media de los datos de Xs es
#prácticamente cero y el valor de la desviación típica prácticamente 1.
mean(Xs)
sd(Xs)
round(mean(Xs), digits = 0)
round(sd(Xs), digits = 0)
#Ahora vamos a calcular la matriz de covarianza de los datos Xs y la vamos a
#guardar en la variable CXs.
CXs <- cov(Xs)
fix(CXs)
#Visualizamos la matriz como una imagen y la guardamos en formato .jpeg
image(CXs)
jpeg('CXs.jpeg')
image(CXs)
dev.off()
par_max = which(CXs == max(abs(CXs)), arr.ind = TRUE)
fix(par_max)
par_max = which(CXs == max(abs(CXs)), arr.ind = TRUE)
par_min = which(CXs == min(abs(CXs)), arr.ind = TRUE)
fix(par_min)
par_max = which(CXs == max(abs(CXs)), arr.ind = FALSE)
fix(par_max)
par_min = which(CXs == min(abs(CXs)), arr.ind = TRUE)
fix(par_min)
par_min = which(CXs == min(abs(CXs)), arr.ind = TRUE)
fix(par_min)
par_max = which(CXs == max(abs(CXs)), arr.ind = TRUE)
fix(par_max)
fix(CXs)
#Buscamos el nombre (índice) de las variables que contienen el mayor y menor
#valor absoluto de covarianza
max_cov <- abs(max(CXs))
min_cov <- abs(min(CXS))
min_cov <- abs(min(CXs))
max_cov
min_cov
par_max = which(CXs == max(abs(CXs)), arr.ind = TRUE)
fix(par_max)
par_min = which(CXs == min(abs(CXs)), arr.ind = TRUE)
fix(par_min)
min_cov <- abs(min(CXs))
min_cov
CXs
max_cov
min_cov
min_cov
min_cov
min_cov <- abs(min(-CXs))
min_cov
#Buscamos el nombre (índice) de las variables que contienen el mayor y menor
#valor absoluto de covarianza
max_cov <- abs(max(-CXs))
max_cov
min_cov()
min_cov
min_cov <- (min(CXs))
max_cov
min_cov
par_max = which(CXs == max((CXs)), arr.ind = TRUE)
par_max
par_min = which(CXs == min((CXs)), arr.ind = TRUE)
par_min
par_min = which(CXs == min(abs(CXs)), arr.ind = TRUE)
par_min
par_min = which(CXs == min((CXs)), arr.ind = TRUE)
par_min
min_cov <- abs(min(CXs))
max_cov
min_cov
#Buscamos el nombre (índice) de las variables que contienen el mayor y menor
#valor absoluto de covarianza
max_cov <- abs(max(CXs))
min_cov <- abs(min(CXs))
max_cov
min_cov
par_max = which(CXs == max((CXs)), arr.ind = TRUE)
par_max
par_min = which(CXs == min((CXs)), arr.ind = TRUE)
par_min
CXs_ab <- abs(CXs)
CXs_ab
#Calculamos los valores máximo y mínimo de lso valores absolutos.
max_cov_ab <- abs(max(CXs_ab))
min_cov_ab <- abs(min(CXs_ab))
max_cov_ab
min_cov_ab
#Calculamos los valores máximo y mínimo de lso valores absolutos.
max_cov_ab <- abs(max(CXs_ab[2]))
min_cov_ab <- abs(min(CXs_ab[2]))
max_cov_ab
min_cov_ab
#Mostramos los valores máximo y mínimo de los valores absolutos.
tail(sort(CXs_ab), 2)
head(sort(CXs_ab), 2)
#Mostramos los valores máximo y mínimo de los valores absolutos.
tail(sort(CXs_ab), 4)
head(sort(CXs_ab), 4)
#Localizamos el número asociado a las variables de estos valores
par_max_var = which(CXs_ab == par_max, arr.ind = TRUE)
par_max_var
par_min_var = which(CXs_ab == par_min, arr.ind = TRUE)
par_min_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = which(CXs_ab == par_max)
#Mostramos el par de valores máximo y mínimo de los valores absolutos.
par_max = tail(sort(CXs_ab), 4)
par_max
par_min
par_min = head(sort(CXs_ab), 4)
par_max
par_min
#Localizamos el número asociado a las variables de estos valores
par_max_var = which(CXs_ab %in% par_max, arr.ind = TRUE)
par_max_var
par_min_var = which(CXs_ab %in% par_min, arr.ind = TRUE)
par_min_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = which(CXs_ab %in% par_max)
par_max_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = which(CXs_ab %in% par_max, arr.ind = FALSE)
par_max_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = which(CXs_ab == par_max, arr.ind = FALSE)
par_max_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = which(CXs_ab == 1, arr.ind = FALSE)
par_max_var
par_min_var = which(CXs_ab == 0.00395581, CXs_ab == 0.01873346, arr.ind = TRUE)
par_min_var
#Mostramos el par de valores máximo y mínimo de los valores absolutos.
par_max = tail(sort(CXs_ab), 4)
par_min = head(sort(CXs_ab), 4)
fix(par_max)
#Localizamos el número asociado a las variables de estos valores
par_max_var = which(CXs_ab == par_max)
par_max_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = which(CXs_ab %in% par_max)
par_max_var
CXs_ab
#Localizamos el número asociado a las variables de estos valores
par_max_var = location(CXs_ab == par_max)
par_max_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = summarise(first(par_max), nth(par_max, 3))
par_max_var
#Mostramos el par de valores máximo y mínimo de los valores absolutos.
par_max = tail(sort(CXs_ab), 4)
par_min = head(sort(CXs_ab), 4)
par_max
par_min
#Localizamos el número asociado a las variables de estos valores
par_max_var = CXs_ab %>% filter(par_max)
par_max_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = CXs_ab %>% filter(CXs_ab == par_max)
par_max_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = CXs_ab %>% filter(CXs_ab == 1)
par_max_var
#Mostramos el par de valores máximo y mínimo de los valores absolutos.
par_max = tail(sort(CXs_ab), 4)
par_min = head(sort(CXs_ab), 4)
par_max
par_min
#Localizamos el número asociado a las variables de estos valores
par_max_var = CXs_ab %>% filter(CXs_ab == 1)
par_max_var
#Localizamos el número asociado a las variables de estos valores
par_max_var = CXs_ab %>% filter_all(any_CXs_ab == 1)
#Localizamos el número asociado a las variables de estos valores
par_max_var = CXs_ab %>% filter_all(par_max == 1)
par_max_var
CXs_ab <- abs(CXs)
CXs_ab
#Mostramos el par de valores máximo y mínimo de los valores absolutos.
par_max = tail(sort(CXs_ab), 4)
par_min = head(sort(CXs_ab), 4)
row(par_max)
#Mostramos el par de valores máximo y mínimo de los valores absolutos.
par_max = row(tail(sort(CXs_ab), 4))
CXs_ab <- abs(CXs)
CXs_ab
#Mostramos el par de valores máximo y mínimo de los valores absolutos.
par_max = tail(sort(CXs_ab), 4)
par_min = head(sort(CXs_ab), 4)
par_max
par_min
#Localizamos el número asociado a las variables de estos valores
valores = unique(CXs_ab)
match(par_max, valores)
match(par_min, valores)
#Localizamos el número asociado a las variables de estos valores
valores = unique(CXs_ab)
valores
match(par_max, CXs_ab)
#Mostramos el par de valores máximo y mínimo de los valores absolutos.
par_max = tail(sort(CXs_ab), 4)
par_min = head(sort(CXs_ab), 4)
par_max
par_min
match(par_max, CXs_ab)
match(par_min, CXs_ab)
CXs_ab <- abs(CXs)
CXs_ab
#Mostramos el par de valores máximo y mínimo de los valores absolutos.
par_max = tail(sort(CXs_ab), 4)
par_min = head(sort(CXs_ab), 4)
par_max
par_min
#Localizamos el número asociado a las variables de estos valores
valores = unique(CXs_ab)
ma = match(par_max, valores)
mi = match(par_min, valores)
pos_ma = which(CXs == valores[ma])
pos_mi = which(CXs == valores[mi])
#Localizamos el número asociado a las variables de estos valores
valores = unique(CXs_ab)
ma = match(par_max, valores)
mi = match(par_min, valores)
pos_ma = which(CXs == valores[ma])
pos_mi = which(CXs == valores[mi])
pos_ma
pos_mi
par_min
CXs_ab
#Convertimos la matriz CXs_ab en una lista ordenada y localizamos los valores
# de par_max y par_min
lista_ord = as.list(CXs_ab)
pos_par_max = which(lista_ord == par_max)
pos_par_min = which(lista_ord == par_min)
pos_par_max
pos_par_min
lista_ord
#Mostramos el par de valores máximo y mínimo de los valores absolutos de la
#matriz CXs_ab.
par_max = tail(sort(CXs_ab), 4)
par_min = head(sort(CXs_ab), 4)
par_max
par_min
#Convertimos la matriz CXs_ab en una lista ordenada y localizamos los valores
# de par_max y par_min
lista_ord = as.list(CXs_ab)
pos_par_max = which(lista_ord == par_max)
pos_par_min = which(lista_ord == par_min)
lista_ord
pos_par_max
pos_par_min
par_max
par_min
#Convertimos la matriz CXs_ab en una lista ordenada y localizamos los valores
# de par_max y par_min
lista_ord = as.list(CXs_ab)
pos_par_max = which(lista_ord == par_max)
pos_par_min = which(lista_ord == par_min)
pos_par_max
pos_par_min
lista_ord
pos_par_min
#Mostramos el par de valores máximo y mínimo de los valores absolutos de la
#matriz CXs_ab.
par_max = tail(sort(CXs_ab), 4)
par_min = head(sort(CXs_ab), 5)
par_max
par_min
#Convertimos la matriz CXs_ab en una lista ordenada y localizamos los valores
# de par_max y par_min
lista_ord = as.list(CXs_ab)
pos_par_max = which(lista_ord == par_max)
pos_par_min = which(lista_ord == par_min)
pos_par_max
pos_par_min
par_min = head(sort(CXs_ab), 4)
pos_par_min
pos_par_min = which(lista_ord == par_min)
pos_par_min
#Comprobamos visualmente en la lista que los datos obtenidos concuerdan
lista_ord(59)
#Comprobamos visualmente en la lista que los datos obtenidos concuerdan
lista_ord[59]
#Comprobamos visualmente en la lista que los datos obtenidos concuerdan
lista_ord[53, 59]
#Comprobamos visualmente en la lista que los datos obtenidos concuerdan
lista_ord[[53],[59]]
pos_par_min
par_min
pos_par_min = which(lista_ord == par_min[1])
pos_par_max
pos_par_min
pos_par_min = which(lista_ord == par_min[1, 3])
par_min[1]
pos_par_min_1
pos_par_min_1 = which(lista_ord == par_min[1])
pos_par_min_2 = which(lista_ord == par_min[2])
pos_par_max
pos_par_min_1
pos_par_min_2
pos_par_min_1 = which(lista_ord == par_min[1])
pos_par_min_2 = which(lista_ord == par_min[3])
pos_par_max
pos_par_min_1
pos_par_min_2
CXs
comp_prin <- prcomp(Xs, scale = TRUE, center = TRUE)
comp_prin
comp_prin <- prcomp(Xs)
comp_prin
CXs
comp_prin <- prcomp(Xs, scale = TRUE, center = TRUE)
comp_prin
#Comprobamos que la media es prácticamente cero y la desviación típica uno
comp_prin$center
comp_prin$scale
comp_prin$rotation
comp_prin$x
#Calculamos lo componentes principales de la matriz de datos normalizada Xs
comp_prin <- prcomp(Xs, scale = TRUE, center = TRUE)
fix(comp_prin)
comp_prin
comp_prin
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
