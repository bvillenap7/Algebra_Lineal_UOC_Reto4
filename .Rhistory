L <- L + 1
}
L <- 0
ifelse(dt[(acumulado_com.prin)] < 80,L <- L + 1, "Porcentaje lejano a 75%")
ifelse(dt[col(acumulado_com.prin)] < 80,L <- L + 1, "Porcentaje lejano a 75%")
for (i in dt[acumulado_com.prin]){
print(i)
}
for (i in dt[(acumulado_com.prin)]){
print(i)
}
for (i in dt[dt$acumulado_com.prin]){
print(i)
}
#Calculamos la variabilidad acumuladada de las variables originales y de las
#componentes principales
library(data.table)
variabilidad_org = 100/12
variabilidad_org
com_principales <- round(porc_varianza, digits = 2)
variabilidad_cp = data.frame(variables = 1:12, com_principales,
variabilidad_org )
dt <- as.data.table(variabilidad_cp)
dt[, acumulado_com.prin:= cumsum(porcentaje)]
dt[,acumulado_original := cumsum(variabilidad_org)]
dt
L <- 0
for (i in dt[dt$acumulado_com.prin]){
print(i)
}
for (i in dt[col == 'acumulado_com.prin']){
print(i)
}
for (i in dt[col == acumulado_com.prin]){
print(i)
}
dt <- as.data.frame(dt)
L <- 0
for (i in dt[col == acumulado_com.prin]){
print(i)
}
for (i in dt[col == 'acumulado_com.prin']){
print(i)
}
for (i in dt[('acumulado_com.prin')]){
print(i)
}
#Calculamos la variabilidad acumuladada de las variables originales y de las
#componentes principales
library(data.table)
variabilidad_org = 100/12
variabilidad_org
com_principales <- round(porc_varianza, digits = 2)
variabilidad_cp = data.frame(variables = 1:12, com_principales,
variabilidad_org )
dt <- as.data.table(variabilidad_cp)
dt[, acumulado_com.prin:= cumsum(porcentaje)]
dt[,acumulado_original := cumsum(variabilidad_org)]
dt <- as.data.frame(dt)
L <- 0
for (i in dt[('acumulado_com.prin')]){
while (i < 80){
L <- L + 1
}
}
L <- 0
for (i in dt[('acumulado_com.prin')]){
ifelse(i < 80,L <- L + 1, "Falso")
}
L
dt <- as.data.table(variabilidad_cp)
dt[, acumulado_com.prin:= cumsum(porcentaje)]
dt[,acumulado_original := cumsum(variabilidad_org)]
dt <- as.data.frame(dt)
L <- 0
for(i in 1:length(dt[('acumulado_com.prin')])) {
if(dt[('acumulado_com.prin')][i] < 80) {
L <- L + 1))
L
dt <- as.data.frame(dt)
L <- 0
for(i in 1:length(dt[('acumulado_com.prin')])) {
if(dt[('acumulado_com.prin')][i] < 80) {
L <- L + 1)
for(i in 1:length(dt[('acumulado_com.prin')])) {
if(dt[('acumulado_com.prin')][i] < 80) {
L <- L + 1
}
}
for(i in 1:(length(dt[('acumulado_com.prin'))])) {
L
L <- 0
for(i in 1:(length(dt[('acumulado_com.prin')]))) {
if(dt[('acumulado_com.prin')][i] < 80) {
L <- L + 1
}
}
L
#Calculamos la variabilidad acumuladada de las variables originales y de las
#componentes principales
library(data.table)
variabilidad_org = 100/12
variabilidad_org
com_principales <- round(porc_varianza, digits = 2)
variabilidad_cp = data.frame(variables = 1:12, com_principales,
variabilidad_org )
dt <- as.data.table(variabilidad_cp)
dt[, acumulado_com.prin:= cumsum(porcentaje)]
dt[,acumulado_original := cumsum(variabilidad_org)]
dt
#Calculamos la variabilidad acumuladada de las variables originales y de las
#componentes principales
library(data.table)
variabilidad_org = 100/12
variabilidad_org
com_principales <- round(porc_varianza, digits = 2)
variabilidad_cp = data.frame(variables = 1:12, com_principales,
variabilidad_org )
dt <- as.data.table(variabilidad_cp)
dt[, acumulado_com.prin:= cumsum(porcentaje)]
dt[,acumulado_original := cumsum(variabilidad_org)]
dt
#Podemos observar en la columna acumulado_com.prin que necesitamos como
#Podemos observar en la columna acumulado_com.prin que necesitamos como
#mínimo de 3 componentes principales para explicar un 75% de la varianza
#Podemos observar en la columna acumulado_com.prin que necesitamos como
#mínimo de 3 componentes principales para explicar un 75% de la varianza
#de nuestros datos
#Podemos observar en la columna acumulado_com.prin que necesitamos como
#mínimo de 3 componentes principales para explicar un 75% de la varianza
#de nuestros datos
#Podemos observar en la columna acumulado_com.prin que necesitamos como
#mínimo de 3 componentes principales para explicar un 75% de la varianza
#de nuestros datos
#Podemos observar en la columna acumulado_com.prin que necesitamos como
#mínimo de 3 componentes principales para explicar un 75% de la varianza
#de nuestros datos
#Podemos observar en la columna acumulado_com.prin que necesitamos como
#mínimo de 3 componentes principales para explicar un 75% de la varianza
#de nuestros datos
CXs
image(CXs_ab)
jpeg('CXs_ab.jpeg')
image(CXs_ab)
dev.off()
loadings_cp2 <- comp_prin$rotation[,2]
loadings_cp2_abs <- abs(loadings_cp2)
loadings_cp2_ordmax <- sort(loadings_cp2_abs, decreasing = TRUE)
loadings_cp2_ordmin <- sort(loadings_cp2_abs, decreasing = FALSE)
loadings_cp2_ordmax
loadings_cp2_ordmin
loadings_cp2_ordmax[0:1]
loadings_cp2_ordmax[0:1]
loadings_cp2_ordmin[0:1]
loadings_cp2 <- comp_prin$rotation[,2]
loadings_cp2_abs <- abs(loadings_cp2)
loadings_cp2_ordmax <- sort(loadings_cp2_abs, decreasing = TRUE)
loadings_cp2_ordmin <- sort(loadings_cp2_abs, decreasing = FALSE)
loadings_cp2_ordmax[0:1]
loadings_cp2_ordmin[0:1]
loadings_cp-C2 <- comp_prin$rotation[,2]
loadings_cp-C2_abs <- abs(loadings_cp2)
loadings_cp-C2_ordmax <- sort(loadings_cp2_abs, decreasing = TRUE)
loadings_cp-C2 <- comp_prin$rotation[,2]
loadings_cp-C2_abs <- abs(loadings_cp2)
loadings_cp-C2_ordmax <- sort(loadings_cp2_abs, decreasing = TRUE)
loadings_cp-C2_ordmin <- sort(loadings_cp2_abs, decreasing = FALSE)
loadings_cp-C2_ordmax[0:1]
loadings_cpC2 <- comp_prin$rotation[,2]
loadings_cpC2_abs <- abs(loadings_cp2)
loadings_cpC2_ordmax <- sort(loadings_cp2_abs, decreasing = TRUE)
loadings_cpC2_ordmin <- sort(loadings_cp2_abs, decreasing = FALSE)
loadings_cpC2_ordmax[0:1]
loadings_cpC2_ordmin[0:1]
loadings_cpC2
loadings_cpC2[8:9]
loadings_cpC2 <- comp_prin$rotation[,2]
loadings_cpC2_abs <- abs(loadings_cp2)
loadings_cpC2_ordmax <- sort(loadings_cp2_abs, decreasing = TRUE)
loadings_cpC2_ordmin <- sort(loadings_cp2_abs, decreasing = FALSE)
loadings_cpC2_ordmax[0:1]
loadings_cpC2_ordmin[0:1]
#Comprobamos que sus posiciones son 8 y 9 respectivamente
loadings_cpC2[8:9]
loadings_cpC2 <- comp_prin$rotation[,2]
loadings_cpC2_abs <- abs(loadings_cp2)
loadings_cpC2_ordmax <- sort(loadings_cp2_abs, decreasing = TRUE)
loadings_cpC2_ordmin <- sort(loadings_cp2_abs, decreasing = FALSE)
loadings_cpC2_ordmax[0:1]
loadings_cpC2_ordmin[0:1]
dt
loadings_cpC2 <- comp_prin$rotation[,2]
loadings_cpC2_abs <- abs(loadings_cp2)
loadings_cpC2_ordmax <- sort(loadings_cp2_abs, decreasing = TRUE)
loadings_cpC2_ordmin <- sort(loadings_cp2_abs, decreasing = FALSE)
loadings_cpC2_ordmax[0:1]
loadings_cpC2_ordmin[0:1]
#Comprobamos que sus posiciones son 8 y 9 respectivamente
loadings_cpC2[8:9]
new_var <- predict(comp_prin, CXs_ab)
new_var
new_var <- predict(comp_prin, CXs)
new_var
new_var <- predict(comp_prin, var_matrix)
new_var
modelo <- prcomp(var_df)
nuevas_vars <- predict(modelo, newdata = var_df)
nuevas_vars
nuevas_vars <- predict(comp_prin, newdata = var_df)
nuevas_vars
nuevas_vars <- predict(comp_prin, newdata = CXs_ab)
nuevas_vars
nuevas_vars <- predict(comp_prin, newdata = CXs_ab)
nuevas_vars
max(nuevas_vars)
max(nuevas_vars)
min(nuevas_vars)
max(abs(nuevas_vars))
min(abs(nuevas_vars))
max(abs(nuevas_vars[2]))
nuevas_vars <- predict(comp_prin, newdata = CXs_ab)
nuevas_vars
max(abs(nuevas_vars[2]))
min(abs(nuevas_vars[2]))
max(abs(nuevas_vars[,2]))
min(abs(nuevas_vars[,2]))
#localizamos indice de los valores maximo y minimos de C = 2
which.row(nuevas_vars, max)
which.row(nuevas_vars, mmin)
#localizamos indice de los valores maximo y minimos de C = 2
which(nuevas_vars, max)
which(nuevas_vars, mmin)
#localizamos indice de los valores maximo y minimos de C = 2
which(nuevas_vars == max)
#localizamos indice de los valores maximo y minimos de C = 2
which(nuevas_vars[,2] == max)
which(nuevas_vars[,2] == min)
max <- max(abs(nuevas_vars[,2]))
min <- min(abs(nuevas_vars[,2]))
max
min
#localizamos indice de los valores maximo y minimos de C = 2
list = as.list(nuevas_vars[,2])
list
which(lista_ord == max)
which(lista == max)
which(list == max)
which(list == min)
nuevas_vars <- predict(comp_prin, newdata = CXs_ab)
nuevas_vars
max <- max(abs(nuevas_vars[,2]))
min <- min(abs(nuevas_vars[,2]))
max
min
#localizamos indice de los valores maximo y minimos de C = 2
list = as.list(nuevas_vars[,2])
which(list == max)
which(list == min)
confint(CXs_ab)
confint(CXs)
confint(var_df)
confint(comp_prin)
nuevas_vars <- predict(comp_prin, newdata = Xs)
nuevas_vars
max <- max(abs(nuevas_vars[,2]))
min <- min(abs(nuevas_vars[,2]))
max
min
#localizamos indice de los valores maximo y minimos de C = 2
list = as.list(nuevas_vars[,2])
which(list == max)
which(list == min)
confint(comp_prin)
#localizamos indice de los valores maximo y minimos de C = 2
list = as.list(nuevas_vars[,2])
list
which(list == max)
which(list == min)
max
min
which(list == '4.16092')
which(list == '0.008370836')
which(list == 4.16092)
which(list == 0.008370836)
which(list[4.16092])
which(list['4.16092'])
which(max)
which(nuevas_vars == max)
which(nuevas_vars == min)
which(nuevas_vars == max(abs(nuevas_vars[,2])
list
#localizamos indice de los valores maximo y minimos de C = 2
list = as.list(nuevas_vars[,2])
list
which(nuevas_vars == max(abs(nuevas_vars[,2])
#localizamos indice de los valores maximo y minimos de C = 2
list = as.list(nuevas_vars[,2])
list
which(nuevas_vars == max(abs(nuevas_vars[,2])))
which(nuevas_vars == abs(nuevas_vars[,2]))
nuevas_vars <- predict(comp_prin, newdata = Xs)
nuevas_vars
max <- max(abs(nuevas_vars[,2]))
min <- min(abs(nuevas_vars[,2]))
max
min
which(max in nuevas_vars)
which(max, nuevas_vars)
which(max == nuevas_vars)
max
which(abs(nuevas_vars[,2] == 4.16092))
#localizamos indice de los valores maximo y minimos de C = 2
list = as.list(nuevas_vars[,2])
list
which(abs(nuevas_vars[,2] == 4.16092))
which(abs(nuevas_vars[,2] == '4.16092'))
which(abs(max == '4.16092'))
max
min
list
list[max, min]
list[max]
list[4.16092]
list['4.16092']
list[5]
list[max]
list[min]
list[1]
list[1]
list[3]
max(list)
max(list[])
sort.list(list, decreasing = TRUE)
sort(list, decreasing = TRUE)
sort(list)
sort(abs(nuevas_vars[,2])
sort(abs(nuevas_vars[,2]))
sort(abs(nuevas_vars[,2]), decreasing = FALSE)
#comprobamos que el id 3 coincide con min y que el id 1 coincide con max
ord[1]
ord <- sort(abs(nuevas_vars[,2]), decreasing = FALSE)
ord
#comprobamos que el id 3 coincide con min y que el id 1 coincide con max
ord[1]
ord[-1]
#comprobamos que el id 3 coincide con min y que el id 1 coincide con max
ord[1]
ord[61]
nuevas_vars <- predict(comp_prin, newdata = Xs)
nuevas_vars
max <- max(abs(nuevas_vars[,2]))
min <- min(abs(nuevas_vars[,2]))
max
min
ord <- sort(abs(nuevas_vars[,2]), decreasing = FALSE)
ord
#comprobamos que el id 3 coincide con min y que el id 1 coincide con max
ord[1]
ord[61]
confint(comp_prin)
#Tomamos solo las tres primeras componentes principales
comp_prin$rotation[1:3]
#Tomamos solo las tres primeras componentes principales
L <- abs(comp_prin$rotation[1:3])
#Tomamos solo las tres primeras componentes principales
L <- abs(comp_prin$rotation[1:3])
L
comp_prin
#Tomamos solo las tres primeras componentes principales
L <- abs(comp_prin$rotation)
L
#Tomamos solo las tres primeras componentes principales
L <- abs(comp_prin$rotation[,2])
L
#Tomamos solo las tres primeras componentes principales
L <- abs(comp_prin$rotation[,1:3])
L
comp_prin
#Tomamos solo las tres primeras componentes principales
L <- abs(comp_prin$rotation[,1:3])
L_cp <- predict(L)
L_cp
#Tomamos solo las tres primeras componentes principales
L <- predict(abs(comp_prin$rotation[,1:3]))
L
#Tomamos solo las tres primeras componentes principales
L <- predict(comp_prin$rotation[,1:3])
#Tomamos solo las tres primeras componentes principales
L <- (abs(comp_prin$rotation[,1:3]))
L
residuales
#Tomamos solo las tres primeras componentes principales
L <- (abs(comp_prin$rotation[,1:3]))
L
lm_fit <- lm(y ~ L)
residuales <- residuals(L)
residuales
residuales <- resid(L)
residuales <- resid(predict(L))
residuales <- resid(L)
L
residuos <- rstandard(L)
#Tomamos solo las tres primeras componentes principales
L <- (abs(comp_prin$rotation[,1:3]))
L <- as.matrix(L)
residuos <- rstandard(L)
residuos <- rstandard(L[1])
#Tomamos solo las tres primeras componentes principales
L <- (abs(comp_prin$rotation[,1:3]))
L
#Tomamos solo las tres primeras componentes principales
L <- (abs(comp_prin$rotation[,1:3]))
L
components <- comp_prin$x[, 1:3]
components
#Calculamos lo componentes principales de la matriz de datos normalizada Xs
comp_prin <- prcomp(Xs, scale = TRUE, center = TRUE)
comp_prin
#Tomamos solo las tres primeras componentes principales
L <- (abs(comp_prin$rotation[,1:3]))
#Tomamos solo las tres primeras componentes principales
L <- (abs(comp_prin[,1:3]))
L
comp_prin$x
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin, newdata = L)
#Tomamos solo las tres primeras componentes principales
L <- comp_prin$x[, 1:3]
L
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin, newdata = L)
L
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin[,1:3], newdata = L)
rec
#Tomamos solo las tres primeras componentes principales
L <- comp_prin$x[, 1:3]
L
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin[,1:3], newdata = L)
#Tomamos solo las tres primeras componentes principales
L <- comp_prin$x[, 1:3]
L
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin, newdata = L)
rec
comp_prinL
comp_prin
L
comp_prin$x
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin$x, newdata = L)
rec
L
#Reconstruimos los datos sólo usando L
rec <- predict(L, newdata = comp_prin)
rec
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin[,1:3], newdata = L)
rec
comp_prin[,1:3]
comp_prin[,1:3]
comp_prin[1:3]
comp_prin
L
comp_prin$x
L
comp_prin[1:3,]
comp_prin$rotation[,1:3]
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin$rotation[,1:3], newdata = L)
rec
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin$rotation[,1:3], newdata = L)
#Tomamos solo las tres primeras componentes principales
L <- comp_prin$x[, 1:3]
L <- as.matrix(L)
ej <- predict(comp_prin$rotation[,1:3])
#Tomamos solo las tres primeras componentes principales
L <- comp_prin$x[, 1:3]
L <- as.matrix(L)
ej <- comp_prin$rotation[,1:3]
ej <- as.matrix(ej)
#Reconstruimos los datos sólo usando L
rec <- predict(comp_prin$rotation[,1:3], newdata = L)
rec
#Tomamos solo las tres primeras componentes principales
L <- comp_prin$x[, 1:3]
L
ej <- comp_prin$rotation[,1:3]
ej
ej <- comp_prin[,1:3]
ej
#Calculamos el error residual
Xs[, 1:3]
#Calculamos el error residual
Error_res <- Xs[, 1:3] - L
Error_res
#Calculamos el error residual
Error_res <- Xs[, 1:3] - L
Error_res <- as.matrix(Error_res)
Error_res
sd(Error_res)
#Tomamos solo las tres primeras componentes principales
L <- comp_prin$x[, 1:3]
L
#Calculamos el error residual
Error_res <- Xs[, 1:3] - L
Error_res <- as.matrix(Error_res)
Error_res
#Calculamos la desviación típica del error residual.
sd(Error_res)
